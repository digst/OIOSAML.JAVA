package dk.gov.oio.saml.service;

import java.util.UUID;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.opensaml.saml.saml2.core.Assertion;

import dk.gov.oio.saml.util.ExternalException;
import dk.gov.oio.saml.util.IdpUtil;
import dk.gov.oio.saml.util.TestConstants;

public class AssertionServiceTest extends BaseServiceTest {

    @DisplayName("Test retrieving encrypted Assertion")
    @Test
    public void testGetEncryptedAssertion() throws Exception {
        String nameID = "https://data.gov.dk/model/core/edi/person/uuid/37a5a1aa-67ce-4f70-b7c0-b8e678d585f7";
        
        AssertionService assertionService = new AssertionService();
        Assertion assertion = assertionService.getAssertion(IdpUtil.createResponse(true, true, true, nameID, TestConstants.SP_ENTITY_ID, TestConstants.SP_ASSERTION_CONSUMER_URL, UUID.randomUUID().toString()));

        // it does not make sense to validate the fields, as they are generated by code,
        // but at least validate a single field, to ensure decryption worked as intended
        Assertions.assertNotNull(assertion);
        Assertions.assertEquals(nameID, assertion.getSubject().getNameID().getValue());
    }
    
    @DisplayName("Test retrieving plaintext Assertion")
    @Test
    public void testGetPlaintextAssertion() throws Exception {
        AssertionService assertionService = new AssertionService();
        Assertion assertion = assertionService.getAssertion(IdpUtil.createResponse(false, true, true,  "NAMEID", TestConstants.SP_ENTITY_ID, TestConstants.SP_ASSERTION_CONSUMER_URL, UUID.randomUUID().toString()));

        // assert that we get something back
        Assertions.assertNotNull(assertion);
    }
    
    @DisplayName("Test retrieving badly formatted plaintext Assertion")
    @Test
    public void testGetBadlyEncryptedAssertion() throws Exception {
        AssertionService assertionService = new AssertionService();

        // Get Assertion, should fail since encryption certificate is not valid
        Assertions.assertThrows(ExternalException.class , () -> {
            assertionService.getAssertion(IdpUtil.createResponse(true, false, true,  "NAMEID", TestConstants.SP_ENTITY_ID, TestConstants.SP_ASSERTION_CONSUMER_URL, UUID.randomUUID().toString()));
        });
    }
}
